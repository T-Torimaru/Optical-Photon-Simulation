# #
# # Create a scene handler/viewer for a specific graphics system
# #    The compound command "/vis/open <vis-driver-name>"
# #    is equivalent to the following set of commands:
# #
# #    /vis/sceneHandler/create
# #    /vis/viewer/create
# #
# # Create a scene handler and a viewer for the OGLIXm driver
# #
# /vis/open OGL 600x600-0+0
# #
# #/vis/viewer/set/style surface
# #/vis/viewer/set/style wireframe
# #
# # Set direction from target to camera.
# /vis/viewer/set/viewpointThetaPhi 60 20
# /vis/viewer/zoom 0.7
# #
# #    The compound command "/vis/drawVolume"
# #    is equivalent to the following set of commands:
# #
# #    /vis/scene/create
# #    /vis/scene/add/volume
# #    /vis/sceneHandler/attach
# # Create an empty scene and add the detector geometry to it
# /vis/drawVolume
# #
# #/vis/scene/add/axes 0 0 0 0.5 cm
# #
# # Store particle trajectories for visualization
# # (if too many tracks cause core dump => storeTrajectory 0)
# /tracking/storeTrajectory 2
# #
# # Add trajectories to the current scene
# /vis/scene/add/trajectories smooth
# #
# # Requests viewer to accumulate hits, tracks, etc. at end of event.
# # detector remains or is redrawn.
# /vis/scene/endOfEventAction refresh
# #/vis/scene/endOfEventAction accumulate
# #
# #/event/drawTracks charged
# #

# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 60. 20.
#
# Specify zoom value:
/vis/viewer/zoom 0.7
#
# Specify style (surface or wireframe):
#/vis/viewer/set/style wireframe
#
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
 /vis/scene/add/trajectories smooth
 /vis/modeling/trajectories/create/drawByCharge
 /vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
 /vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e+ red
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
